GIT COMMANDS
___________________
git help log
git log --help

GIT CONFIG 
___________________
git config --global user.name "ram pratap bachina"
git config --global user.email "ram.pratap.bachina@oracle.com"
git config --global http.proxy http://www-proxy.us.oracle.com:80/
git clone https://github.com/bachinaram/tcpip-client-server.git
        - create copy of existing repository includes every version of file and commit history of project

git init

git status
	-untraced files which are not part of repo or stagging dir
	-changes to be commited or stagged files

git status -s
	-M,??,A,D will display files which are modified,added, deleted and known files

git add .
git add filename.txt

git commit -m "commit message"
git commit -a -m "add and commits the message"



FILE CHANGE DIFFERENCES
____________________________
git diff
        - diff between working copy and stage

git diff filename

git diff --staged filename
git diff --staged 
	- displays the difference between repository last commit and stagged changes

git rm filename
	- removes the file and applies the changes to stage area

git rm --cache filename.txt
        - in case if file is stagged want to unrecognize or made it as untracked but it wont remove the file physically but removed from repository

CHECK THE HISTORY OF COMMITS
_____________________________
git log
        - gives the history of commits with commit information

git log --stat
        - gives the history of commits with information and files changed

git log --pretty=oneline
	-gives commit history in oneline
git log --pretty=oneline -n 10
	-gives commit history with last 10 commits
git log --pretty=format:"%h - %an, %ar : %s"
	-gives commit history in given format commit hash, user, hours, comment for commit

git log origin/main -pretty=oneline
	- it diplays the local repository changes fetch from remote repo

git log --oneline --decorate --graph --all
	- This will give the history of commits with grapgh decoration

UNDOING THINGS
____________________
git commit --amend
	-changes the hash commit id but same version of the code, IMP this is possible only when there are no latest commits
git restore --staged filename
	- in case if we accidently made file as untraced then revert by using the restore command.
        - this also does in case if the file is stagged and want to unstage

git restore --staged filename
git reset HEAD filenam
	- removes the files from stage area but not actual file changes

Below commands both does same operations[works only unstagged stage]
git restore filename.txt
git checkout -- filename
	- reverts the modified file changes
	-[DANGEROUS COMMAND] 

git revert HEAD
	-revert the latest commit
git revert HEAD 
	-revert the latest commit and skip the message editor,
	-instead of deleting old commit git creates new commit 
git revert HEAD~1
	-Reverts last wo commits
git reset <hash>
git reset abcssh1
	- reset to the commit with hash abcsh1

HOW TO REVERT A COMMITTED FILE
______________________________
1. First get the commits for the file we want to rever
git log --oneline filename.txt

2. From the list of commits to which commit you want to revert give it in the below commit
git checkout <hash_sha> -- filename.txt
git commit -m "reverting and new commit to filename.txt"



GIT REMOTE REPOSITORIES
_________________________
git remote
	- displays remote repository name if we clone from remote repoitory, default remote repository name is origin
	- we generally clone the repository to local using "git clone htpps:github.com/bachinaxyz..."

git remote -v
	- displays shortname and urls tagged to the shortname eg., given below
	-origin	https://github.com/bachinaram/my_git_learning.git (fetch)
	-origin	https://github.com/bachinaram/my_git_learning.git (push) 

git remote show <remote_name>
git remote show origin
	-More detail information about the remote

git remote rename <remote_name> <new_remote_name>
git remote rename origin basement
	-Use above command to rename the remote name

git push origin main
	- Pushing changes from local repo to remote repo[both remote and local branch names must be same]

git push origin master:main
	- Pushing changes from local repo master branch to remote repo main branch [Use this if remote and local repo branch names are different]

git fetch origin main
	- fetches remote branch changes to local repo but wont merge to local directory

git fetch --all
	-Fetches all registerd remotes and all branches from the remotes

git merge origin/main
	- merge changes from local repository to working directory

git pull origin main
	- fetch and merge from remote branch to local repo and local direcotry


GIT TAGGING
--------------
git tag <tagname>
git tag v1.050323.1.L
	- creates light weight tag which is pointer to specific commit

git tag -a v1.050323.1.A -m "creating first annotation tag"
	-This creates annotation tag which is stored as full objects in database.

git tag
	-displays created tags

git tag -l "v1.*"
	-displays tags starting with v1.*

git show <tagname>
git show v1.050323.1.L
	-Diplay information about given tag

git push origin v1.050323.1.L
git push origin --tags
	- we have to explicitly move tags to remote repo it wont push as part of code move to remote


GIT ALIASES
-------------
git config --global alias.co "checkout --"
	-usage e.g., git co filename
git config --global alias.unstage "reset HEAD"
	-usage e.g., git unstage filename
git config --global alias.ci "commit"
	-usage e.g., git ci -m "some new changes"
git config --global alias.log "log --pretty=oneline -n 10"
	-Usage e.g., git log 


git branch
	- It will list out the branches for the repository
----------
