GIT BRANCHES
-----------------

git branch
	- Displays list of branches in the local repository

git branch <branch_name>
git branch testing
	- Creates new branch testing 

git branch -a
	- list all local and remote branches of current git
git branch -r
	- list only remote branches of git

GIT BRANCH SWITCHING
______________________
git checkout <branch_name>
git checkout testing 
	- Switch from some branch to testing branch


BRANCH CREATION AND SWITCHING AT SAME TIME
______________________________________________
git checkout -b <branch_name>
git checkout -b hotfix
	- This will create new branch hot_fix and switches to hot_fix branch
	- git branch hotfix 
	- git checkout hotfix



REMOVING THE BRANCH
____________________

git branch -d <branch_name>
git branch -d testing
	- This command will destroy the testing branch



MERGE BETWEEN BRANCHES
______________________
git checkout <destination_branch>
git merge <source_branch>

git checkout main
git merge p1_fix_branch

	- p1_fix_branch code will move to main and both main and p1_fix_branch will be in sync


HOW TO RESOLVE CONFLICTS MANUALLY
_________________________________
git checkout main
git merge hot_fix
	-now conflict will araise
git status
	-to check the list of files in conflict state
git mergetool
	-this may try to launch mergetool, if not configured then it will launch default UI tools
	-Now from the UI we can select source, destination, both or neither
	-close the UI then 
git add .
git commit -m "conflicts resolution"
git log --decorate --oneline --graph --all
git pull origin main
git push origin main
__________________________________


HOW TO TRACK ALL BRANCHES IN LOCAL WHICH ARE AHEAD OR BEHIND THE REMOTE BRANCH
_____________________________________________________________________________
git branch -vv
	- iss53     7e424c3 [origin/iss53: ahead 2] forgot the brackets
  	- master    1ae2a45 [origin/master] deploying index fix
	- * serverfix f8674d9 [teamone/server-fix-good: ahead 3, behind 1] new change
  	- testing   5ea463a trying something new

	- testing is not tracking branch whereas rest all are tracking with remote branch, we can see if they are behind or ahead of remote branch.


HOW TO DELETE THE REMOTE BRANCH
_______________________________
git push <remote_name> --delete <remote_branch_name>
git push basement --delete hot_fix
	- delete the remote branch from remote repository




GIT MERGE VS GIT REBASING
__________________________

1. GIT MERGE does 3 way merge
	- new commit commit is created when both branches merges
2. GIT REBASE
	- Identifies the common commit of two branches, from the new branch it collects each commit and places on top of head in another branch.
	- If there are 3 commits in new branch then 3 commits are placed in HEAD of other branch
	- For every commit new commit gets created, eventhough old cmmits are los but we can identify from the comments.
	- Ultimately it all looks like linear
	


HOW TO DO MERGE BETWEEN BRANCHES USING GIT MERGE
_______________________________________________
git checkout main
git merge hot_fix_branch

HOW TO DO MERGE BETWEEN BRANCHES USING THE REBASE
_________________________________________________
git checkout main
git rebase hot_fix

main branch will get hot_fix branch changes, we ahvve to do it in reverse order for both to be in sync
